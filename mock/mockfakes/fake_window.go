// Code generated by counterfeiter. DO NOT EDIT.
package mockfakes

import (
	"lets-go-tetris/mock"
	"sync"

	"github.com/veandco/go-sdl2/sdl"
)

type FakeWindow struct {
	DestroyStub        func()
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
	}
	GetSurfaceStub        func()
	getSurfaceMutex       sync.RWMutex
	getSurfaceArgsForCall []struct {
	}
	UpdateSurfaceStub        func() *sdl.Surface
	updateSurfaceMutex       sync.RWMutex
	updateSurfaceArgsForCall []struct {
	}
	updateSurfaceReturns struct {
		result1 *sdl.Surface
	}
	updateSurfaceReturnsOnCall map[int]struct {
		result1 *sdl.Surface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWindow) Destroy() {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
	}{})
	fake.recordInvocation("Destroy", []interface{}{})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		fake.DestroyStub()
	}
}

func (fake *FakeWindow) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeWindow) DestroyCalls(stub func()) {
	fake.destroyMutex.Lock()
	defer fake.destroyMutex.Unlock()
	fake.DestroyStub = stub
}

func (fake *FakeWindow) GetSurface() {
	fake.getSurfaceMutex.Lock()
	fake.getSurfaceArgsForCall = append(fake.getSurfaceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSurface", []interface{}{})
	fake.getSurfaceMutex.Unlock()
	if fake.GetSurfaceStub != nil {
		fake.GetSurfaceStub()
	}
}

func (fake *FakeWindow) GetSurfaceCallCount() int {
	fake.getSurfaceMutex.RLock()
	defer fake.getSurfaceMutex.RUnlock()
	return len(fake.getSurfaceArgsForCall)
}

func (fake *FakeWindow) GetSurfaceCalls(stub func()) {
	fake.getSurfaceMutex.Lock()
	defer fake.getSurfaceMutex.Unlock()
	fake.GetSurfaceStub = stub
}

func (fake *FakeWindow) UpdateSurface() *sdl.Surface {
	fake.updateSurfaceMutex.Lock()
	ret, specificReturn := fake.updateSurfaceReturnsOnCall[len(fake.updateSurfaceArgsForCall)]
	fake.updateSurfaceArgsForCall = append(fake.updateSurfaceArgsForCall, struct {
	}{})
	fake.recordInvocation("UpdateSurface", []interface{}{})
	fake.updateSurfaceMutex.Unlock()
	if fake.UpdateSurfaceStub != nil {
		return fake.UpdateSurfaceStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateSurfaceReturns
	return fakeReturns.result1
}

func (fake *FakeWindow) UpdateSurfaceCallCount() int {
	fake.updateSurfaceMutex.RLock()
	defer fake.updateSurfaceMutex.RUnlock()
	return len(fake.updateSurfaceArgsForCall)
}

func (fake *FakeWindow) UpdateSurfaceCalls(stub func() *sdl.Surface) {
	fake.updateSurfaceMutex.Lock()
	defer fake.updateSurfaceMutex.Unlock()
	fake.UpdateSurfaceStub = stub
}

func (fake *FakeWindow) UpdateSurfaceReturns(result1 *sdl.Surface) {
	fake.updateSurfaceMutex.Lock()
	defer fake.updateSurfaceMutex.Unlock()
	fake.UpdateSurfaceStub = nil
	fake.updateSurfaceReturns = struct {
		result1 *sdl.Surface
	}{result1}
}

func (fake *FakeWindow) UpdateSurfaceReturnsOnCall(i int, result1 *sdl.Surface) {
	fake.updateSurfaceMutex.Lock()
	defer fake.updateSurfaceMutex.Unlock()
	fake.UpdateSurfaceStub = nil
	if fake.updateSurfaceReturnsOnCall == nil {
		fake.updateSurfaceReturnsOnCall = make(map[int]struct {
			result1 *sdl.Surface
		})
	}
	fake.updateSurfaceReturnsOnCall[i] = struct {
		result1 *sdl.Surface
	}{result1}
}

func (fake *FakeWindow) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	fake.getSurfaceMutex.RLock()
	defer fake.getSurfaceMutex.RUnlock()
	fake.updateSurfaceMutex.RLock()
	defer fake.updateSurfaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWindow) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mock.Window = new(FakeWindow)
