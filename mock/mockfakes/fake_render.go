// Code generated by counterfeiter. DO NOT EDIT.
package mockfakes

import (
	"lets-go-tetris/mock"
	"sync"
)

type FakeRender struct {
	InitStub        func() error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	PollEventStub        func() mock.Event
	pollEventMutex       sync.RWMutex
	pollEventArgsForCall []struct {
	}
	pollEventReturns struct {
		result1 mock.Event
	}
	pollEventReturnsOnCall map[int]struct {
		result1 mock.Event
	}
	QuitStub        func()
	quitMutex       sync.RWMutex
	quitArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRender) Init() error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
	}{})
	fake.recordInvocation("Init", []interface{}{})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.initReturns
	return fakeReturns.result1
}

func (fake *FakeRender) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *FakeRender) InitCalls(stub func() error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *FakeRender) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRender) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRender) PollEvent() mock.Event {
	fake.pollEventMutex.Lock()
	ret, specificReturn := fake.pollEventReturnsOnCall[len(fake.pollEventArgsForCall)]
	fake.pollEventArgsForCall = append(fake.pollEventArgsForCall, struct {
	}{})
	fake.recordInvocation("PollEvent", []interface{}{})
	fake.pollEventMutex.Unlock()
	if fake.PollEventStub != nil {
		return fake.PollEventStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pollEventReturns
	return fakeReturns.result1
}

func (fake *FakeRender) PollEventCallCount() int {
	fake.pollEventMutex.RLock()
	defer fake.pollEventMutex.RUnlock()
	return len(fake.pollEventArgsForCall)
}

func (fake *FakeRender) PollEventCalls(stub func() mock.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = stub
}

func (fake *FakeRender) PollEventReturns(result1 mock.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = nil
	fake.pollEventReturns = struct {
		result1 mock.Event
	}{result1}
}

func (fake *FakeRender) PollEventReturnsOnCall(i int, result1 mock.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = nil
	if fake.pollEventReturnsOnCall == nil {
		fake.pollEventReturnsOnCall = make(map[int]struct {
			result1 mock.Event
		})
	}
	fake.pollEventReturnsOnCall[i] = struct {
		result1 mock.Event
	}{result1}
}

func (fake *FakeRender) Quit() {
	fake.quitMutex.Lock()
	fake.quitArgsForCall = append(fake.quitArgsForCall, struct {
	}{})
	fake.recordInvocation("Quit", []interface{}{})
	fake.quitMutex.Unlock()
	if fake.QuitStub != nil {
		fake.QuitStub()
	}
}

func (fake *FakeRender) QuitCallCount() int {
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	return len(fake.quitArgsForCall)
}

func (fake *FakeRender) QuitCalls(stub func()) {
	fake.quitMutex.Lock()
	defer fake.quitMutex.Unlock()
	fake.QuitStub = stub
}

func (fake *FakeRender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.pollEventMutex.RLock()
	defer fake.pollEventMutex.RUnlock()
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mock.Render = new(FakeRender)
