// Code generated by counterfeiter. DO NOT EDIT.
package mockfakes

import (
	"lets-go-tetris/mock"
	"sync"

	"github.com/veandco/go-sdl2/sdl"
)

type FakeSurface struct {
	FillRectStub        func(*sdl.Rect, uint32) error
	fillRectMutex       sync.RWMutex
	fillRectArgsForCall []struct {
		arg1 *sdl.Rect
		arg2 uint32
	}
	fillRectReturns struct {
		result1 error
	}
	fillRectReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSurface) FillRect(arg1 *sdl.Rect, arg2 uint32) error {
	fake.fillRectMutex.Lock()
	ret, specificReturn := fake.fillRectReturnsOnCall[len(fake.fillRectArgsForCall)]
	fake.fillRectArgsForCall = append(fake.fillRectArgsForCall, struct {
		arg1 *sdl.Rect
		arg2 uint32
	}{arg1, arg2})
	fake.recordInvocation("FillRect", []interface{}{arg1, arg2})
	fake.fillRectMutex.Unlock()
	if fake.FillRectStub != nil {
		return fake.FillRectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fillRectReturns
	return fakeReturns.result1
}

func (fake *FakeSurface) FillRectCallCount() int {
	fake.fillRectMutex.RLock()
	defer fake.fillRectMutex.RUnlock()
	return len(fake.fillRectArgsForCall)
}

func (fake *FakeSurface) FillRectCalls(stub func(*sdl.Rect, uint32) error) {
	fake.fillRectMutex.Lock()
	defer fake.fillRectMutex.Unlock()
	fake.FillRectStub = stub
}

func (fake *FakeSurface) FillRectArgsForCall(i int) (*sdl.Rect, uint32) {
	fake.fillRectMutex.RLock()
	defer fake.fillRectMutex.RUnlock()
	argsForCall := fake.fillRectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSurface) FillRectReturns(result1 error) {
	fake.fillRectMutex.Lock()
	defer fake.fillRectMutex.Unlock()
	fake.FillRectStub = nil
	fake.fillRectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSurface) FillRectReturnsOnCall(i int, result1 error) {
	fake.fillRectMutex.Lock()
	defer fake.fillRectMutex.Unlock()
	fake.FillRectStub = nil
	if fake.fillRectReturnsOnCall == nil {
		fake.fillRectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.fillRectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSurface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fillRectMutex.RLock()
	defer fake.fillRectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSurface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mock.Surface = new(FakeSurface)
