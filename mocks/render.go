// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	render "lets-go-tetris/render"
	sync "sync"
)

type Render struct {
	CreateWindowStub        func(string, int32, int32, int32, int32, uint32) (*render.Window, error)
	createWindowMutex       sync.RWMutex
	createWindowArgsForCall []struct {
		arg1 string
		arg2 int32
		arg3 int32
		arg4 int32
		arg5 int32
		arg6 uint32
	}
	createWindowReturns struct {
		result1 *render.Window
		result2 error
	}
	createWindowReturnsOnCall map[int]struct {
		result1 *render.Window
		result2 error
	}
	InitStub        func() error
	initMutex       sync.RWMutex
	initArgsForCall []struct {
	}
	initReturns struct {
		result1 error
	}
	initReturnsOnCall map[int]struct {
		result1 error
	}
	PollEventStub        func() render.Event
	pollEventMutex       sync.RWMutex
	pollEventArgsForCall []struct {
	}
	pollEventReturns struct {
		result1 render.Event
	}
	pollEventReturnsOnCall map[int]struct {
		result1 render.Event
	}
	QuitStub        func()
	quitMutex       sync.RWMutex
	quitArgsForCall []struct {
	}
	UpdateStub        func()
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Render) CreateWindow(arg1 string, arg2 int32, arg3 int32, arg4 int32, arg5 int32, arg6 uint32) (*render.Window, error) {
	fake.createWindowMutex.Lock()
	ret, specificReturn := fake.createWindowReturnsOnCall[len(fake.createWindowArgsForCall)]
	fake.createWindowArgsForCall = append(fake.createWindowArgsForCall, struct {
		arg1 string
		arg2 int32
		arg3 int32
		arg4 int32
		arg5 int32
		arg6 uint32
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("CreateWindow", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.createWindowMutex.Unlock()
	if fake.CreateWindowStub != nil {
		return fake.CreateWindowStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createWindowReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Render) CreateWindowCallCount() int {
	fake.createWindowMutex.RLock()
	defer fake.createWindowMutex.RUnlock()
	return len(fake.createWindowArgsForCall)
}

func (fake *Render) CreateWindowCalls(stub func(string, int32, int32, int32, int32, uint32) (*render.Window, error)) {
	fake.createWindowMutex.Lock()
	defer fake.createWindowMutex.Unlock()
	fake.CreateWindowStub = stub
}

func (fake *Render) CreateWindowArgsForCall(i int) (string, int32, int32, int32, int32, uint32) {
	fake.createWindowMutex.RLock()
	defer fake.createWindowMutex.RUnlock()
	argsForCall := fake.createWindowArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *Render) CreateWindowReturns(result1 *render.Window, result2 error) {
	fake.createWindowMutex.Lock()
	defer fake.createWindowMutex.Unlock()
	fake.CreateWindowStub = nil
	fake.createWindowReturns = struct {
		result1 *render.Window
		result2 error
	}{result1, result2}
}

func (fake *Render) CreateWindowReturnsOnCall(i int, result1 *render.Window, result2 error) {
	fake.createWindowMutex.Lock()
	defer fake.createWindowMutex.Unlock()
	fake.CreateWindowStub = nil
	if fake.createWindowReturnsOnCall == nil {
		fake.createWindowReturnsOnCall = make(map[int]struct {
			result1 *render.Window
			result2 error
		})
	}
	fake.createWindowReturnsOnCall[i] = struct {
		result1 *render.Window
		result2 error
	}{result1, result2}
}

func (fake *Render) Init() error {
	fake.initMutex.Lock()
	ret, specificReturn := fake.initReturnsOnCall[len(fake.initArgsForCall)]
	fake.initArgsForCall = append(fake.initArgsForCall, struct {
	}{})
	fake.recordInvocation("Init", []interface{}{})
	fake.initMutex.Unlock()
	if fake.InitStub != nil {
		return fake.InitStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.initReturns
	return fakeReturns.result1
}

func (fake *Render) InitCallCount() int {
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	return len(fake.initArgsForCall)
}

func (fake *Render) InitCalls(stub func() error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = stub
}

func (fake *Render) InitReturns(result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	fake.initReturns = struct {
		result1 error
	}{result1}
}

func (fake *Render) InitReturnsOnCall(i int, result1 error) {
	fake.initMutex.Lock()
	defer fake.initMutex.Unlock()
	fake.InitStub = nil
	if fake.initReturnsOnCall == nil {
		fake.initReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.initReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Render) PollEvent() render.Event {
	fake.pollEventMutex.Lock()
	ret, specificReturn := fake.pollEventReturnsOnCall[len(fake.pollEventArgsForCall)]
	fake.pollEventArgsForCall = append(fake.pollEventArgsForCall, struct {
	}{})
	fake.recordInvocation("PollEvent", []interface{}{})
	fake.pollEventMutex.Unlock()
	if fake.PollEventStub != nil {
		return fake.PollEventStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.pollEventReturns
	return fakeReturns.result1
}

func (fake *Render) PollEventCallCount() int {
	fake.pollEventMutex.RLock()
	defer fake.pollEventMutex.RUnlock()
	return len(fake.pollEventArgsForCall)
}

func (fake *Render) PollEventCalls(stub func() render.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = stub
}

func (fake *Render) PollEventReturns(result1 render.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = nil
	fake.pollEventReturns = struct {
		result1 render.Event
	}{result1}
}

func (fake *Render) PollEventReturnsOnCall(i int, result1 render.Event) {
	fake.pollEventMutex.Lock()
	defer fake.pollEventMutex.Unlock()
	fake.PollEventStub = nil
	if fake.pollEventReturnsOnCall == nil {
		fake.pollEventReturnsOnCall = make(map[int]struct {
			result1 render.Event
		})
	}
	fake.pollEventReturnsOnCall[i] = struct {
		result1 render.Event
	}{result1}
}

func (fake *Render) Quit() {
	fake.quitMutex.Lock()
	fake.quitArgsForCall = append(fake.quitArgsForCall, struct {
	}{})
	fake.recordInvocation("Quit", []interface{}{})
	fake.quitMutex.Unlock()
	if fake.QuitStub != nil {
		fake.QuitStub()
	}
}

func (fake *Render) QuitCallCount() int {
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	return len(fake.quitArgsForCall)
}

func (fake *Render) QuitCalls(stub func()) {
	fake.quitMutex.Lock()
	defer fake.quitMutex.Unlock()
	fake.QuitStub = stub
}

func (fake *Render) Update() {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
	}{})
	fake.recordInvocation("Update", []interface{}{})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		fake.UpdateStub()
	}
}

func (fake *Render) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *Render) UpdateCalls(stub func()) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *Render) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createWindowMutex.RLock()
	defer fake.createWindowMutex.RUnlock()
	fake.initMutex.RLock()
	defer fake.initMutex.RUnlock()
	fake.pollEventMutex.RLock()
	defer fake.pollEventMutex.RUnlock()
	fake.quitMutex.RLock()
	defer fake.quitMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Render) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ render.Render = new(Render)
