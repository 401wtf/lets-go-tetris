// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	render "lets-go-tetris/render"
	sync "sync"
)

type Event struct {
	GetTimestampStub        func() uint32
	getTimestampMutex       sync.RWMutex
	getTimestampArgsForCall []struct {
	}
	getTimestampReturns struct {
		result1 uint32
	}
	getTimestampReturnsOnCall map[int]struct {
		result1 uint32
	}
	GetTypeStub        func() uint32
	getTypeMutex       sync.RWMutex
	getTypeArgsForCall []struct {
	}
	getTypeReturns struct {
		result1 uint32
	}
	getTypeReturnsOnCall map[int]struct {
		result1 uint32
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Event) GetTimestamp() uint32 {
	fake.getTimestampMutex.Lock()
	ret, specificReturn := fake.getTimestampReturnsOnCall[len(fake.getTimestampArgsForCall)]
	fake.getTimestampArgsForCall = append(fake.getTimestampArgsForCall, struct {
	}{})
	fake.recordInvocation("GetTimestamp", []interface{}{})
	fake.getTimestampMutex.Unlock()
	if fake.GetTimestampStub != nil {
		return fake.GetTimestampStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getTimestampReturns
	return fakeReturns.result1
}

func (fake *Event) GetTimestampCallCount() int {
	fake.getTimestampMutex.RLock()
	defer fake.getTimestampMutex.RUnlock()
	return len(fake.getTimestampArgsForCall)
}

func (fake *Event) GetTimestampCalls(stub func() uint32) {
	fake.getTimestampMutex.Lock()
	defer fake.getTimestampMutex.Unlock()
	fake.GetTimestampStub = stub
}

func (fake *Event) GetTimestampReturns(result1 uint32) {
	fake.getTimestampMutex.Lock()
	defer fake.getTimestampMutex.Unlock()
	fake.GetTimestampStub = nil
	fake.getTimestampReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *Event) GetTimestampReturnsOnCall(i int, result1 uint32) {
	fake.getTimestampMutex.Lock()
	defer fake.getTimestampMutex.Unlock()
	fake.GetTimestampStub = nil
	if fake.getTimestampReturnsOnCall == nil {
		fake.getTimestampReturnsOnCall = make(map[int]struct {
			result1 uint32
		})
	}
	fake.getTimestampReturnsOnCall[i] = struct {
		result1 uint32
	}{result1}
}

func (fake *Event) GetType() uint32 {
	fake.getTypeMutex.Lock()
	ret, specificReturn := fake.getTypeReturnsOnCall[len(fake.getTypeArgsForCall)]
	fake.getTypeArgsForCall = append(fake.getTypeArgsForCall, struct {
	}{})
	fake.recordInvocation("GetType", []interface{}{})
	fake.getTypeMutex.Unlock()
	if fake.GetTypeStub != nil {
		return fake.GetTypeStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getTypeReturns
	return fakeReturns.result1
}

func (fake *Event) GetTypeCallCount() int {
	fake.getTypeMutex.RLock()
	defer fake.getTypeMutex.RUnlock()
	return len(fake.getTypeArgsForCall)
}

func (fake *Event) GetTypeCalls(stub func() uint32) {
	fake.getTypeMutex.Lock()
	defer fake.getTypeMutex.Unlock()
	fake.GetTypeStub = stub
}

func (fake *Event) GetTypeReturns(result1 uint32) {
	fake.getTypeMutex.Lock()
	defer fake.getTypeMutex.Unlock()
	fake.GetTypeStub = nil
	fake.getTypeReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *Event) GetTypeReturnsOnCall(i int, result1 uint32) {
	fake.getTypeMutex.Lock()
	defer fake.getTypeMutex.Unlock()
	fake.GetTypeStub = nil
	if fake.getTypeReturnsOnCall == nil {
		fake.getTypeReturnsOnCall = make(map[int]struct {
			result1 uint32
		})
	}
	fake.getTypeReturnsOnCall[i] = struct {
		result1 uint32
	}{result1}
}

func (fake *Event) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTimestampMutex.RLock()
	defer fake.getTimestampMutex.RUnlock()
	fake.getTypeMutex.RLock()
	defer fake.getTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Event) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ render.Event = new(Event)
